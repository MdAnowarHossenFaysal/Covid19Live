{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","res","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","CardDeck","Footer","todayRecovered","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1770e40a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport axios from 'axios';\nimport Form from \"react-bootstrap/Form\";\nimport Columns from \"react-columns\";\n\n\n\nfunction App() {\n  const [latest,setLatest] = useState([]);\n  const [results,setResults] = useState([]); \n  const [searchCountries, setSearchCountries] = useState(\"\");\n           \n \n  useEffect(() => {\n    axios\n    .all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries\"),\n\n      \n    ])\n       \n      .then(res => {\n        setLatest(res[0].data);\n        setResults(res[1].data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter((item) => {\n    return searchCountries !== \"\"\n      ? item.country.toLowerCase().includes(searchCountries.toLowerCase())\n      : item;\n  });\n\n  \n  const countries = filterCountries.map((data, i) =>{\n    return(\n      <Card\n       key={i}\n       bg=\"light\"\n       text=\"dark\"\n       className=\"text-center\"\n       style={{margin: \"10px\"}}\n      >\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n        <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n\n    );\n    \n  })\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n\n\n  return (\n    <div className=\"App\">\n     <CardDeck>\n\n  <Card \n  bg=\"secondary\"\n   text=\"white\"\n   className=\"text-center\"\n   style={{ margin: '10px' }}\n   >\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n      <p>  \n       Total Cases =\n       {latest.cases}\n\n        </p> \n        <p>  \n       Today Cases =\n       {latest.todayCases}\n      \n        </p> \n      </Card.Text>\n    </Card.Body>\n    <Card.Footer >\n  <small >Last Updete {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n\n\n  <Card \n  bg=\"danger\" \n  text=\"white\" \n  className=\"text-center\"\n  style={{ margin: '10px' }}\n  >\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n     \n      <p>  \n       Total Deaths =\n       {latest.deaths}\n\n        </p> \n        <p>  \n       Today Deaths =\n       {latest.todayDeaths}\n      \n        </p> \n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small >Last Updete {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n\n\n  <Card \n  bg=\"success\" \n  text=\"white\"\n  className=\"text-center\"\n  style={{ margin: '10px' }}\n  >\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      <p>  \n       Total Recovered =\n       {latest.recovered}\n\n        </p> \n        <p>  \n       Today Recovered =\n       {latest.todayRecovered}\n      \n        </p> \n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small >Last Updete {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n\n</CardDeck>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n   \n    <Form.Control \n       bg=\"dark\"\n       type=\"text\"\n       placeholder=\"Search for countries\"\n       onChange={(e) => setSearchCountries(e.target.value)}\n      />\n  </Form.Group>\n  \n</Form>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}